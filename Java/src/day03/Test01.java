package day03;

import java.util.Scanner;

public class Test01 {
	/*
	조건 명령문
		: 조건을 주고 조건이 맞는 경우와 맞지 않는 경우를 구분해서 처리해주는 명령문
		
		종류 ]
			1. if
				==> 조건을 제시하고 그 조건에 맞는 경우에만 처리하는 조건문
				
				형식 ]
					if(조건식){
						실행문...
					}
					
					==> 조건식이 맞는 경우에만 실행문을 실행하고 
						맞지 않는 경우에는 조건문을 건너뛰는 방식
				
			2. if ~ else
				==> 조건을 제시하고 조건에 맞는 경우와 맞지 경우 두가지를 처리하는 조건문
				
				형식]
					if(조건식){
						실행문1
					} else {
						실행문2
					}
					
					==> 조건식이 맞는 경우는 실행문1을 실행하고, 
						맞는 경우는 실행문2를 실행하는 방식
				
			3. if ~ else if ~ else
				==> 조건을 두개 이상을 제시하고 각 조건에 맞는 경우를 처리하는 조건문
				
				형식 ]
					
					if(조건식1){
						실행문1
					} else if(조건식2){
						실행문2
					} else if(조건식3){
						실행문3
					...
						
					} else {
						실행문n
					}
					
				==> 조건식을 여러개를 제시해서 그 조건문에 맞는 실행문을 실행하는 조건문
					
				
				
			4. switch ~ case
				==> 조건을 처리하는데 데이터를 여러개를 제시하고 
					그 데이터에 맞는 경우 처리해주는 방법
					
				형식]
					
					switch(변수){
					case 데이터1:
						실행문1;
						break;
					case 데이터2:
						실행문2;
						break;
					...
					default:
						실행문n;
					}
					
				==> 변수의 값이 일치하는 case 문의 실행문을 실행 처리하는 조건식
					
	 */
	/*
	 	제어명령
	 		==> 컴퓨터는 원칙적으로 코드를 실행할 때 순서대로 실행함을 원칙으로 한다.
	 			( 위에서 아래로, 왼쪽에서 오른쪽으로 읽어서 실행을 한다.)
	 			그런데 프로그램을 제작하다 보면 이 순서가 바뀌어야 되는 경우가 발생을 한다.
	 	
	 		종류]
	 			1. 조건제어명령
	 				==> 특정 조건에 따라서 실행순서를 변경하는 명령
	 				
	 				형식1] 
	 					==> 조건식이 참일 경우만 처리하는 조건명령
	 					==> 거짓일 경우 처리내용은 없다. 건너뛴다.
	 					
	 					(1)
	 					if(조건식 - (2)){
	 						처리내용 - (3)
	 						}
	 						-(4)
	 					조건식이 참일경우 : (1) -> (2) -> (3) -> (4)
	 					조건식이 거짓일 경우 : (1) -> (2) -> (4)
	 				
	 				형식2]
	 					==> 조건식이 참일경우와 거짓일 경우의 처리내용을 모두 기술해놓은 조건문
	 					(1)
	 					if(조건식 - (2)){
	 						실행문1 - (3)
	 					}else {
	 						실행문2 - (4)
	 					}
	 						-(5)
	 						
	 					조건식이 참일경우 : (1) -> (2) -> (3) -> (5)
	 					조건식이 거짓일 경우 : (1) -> (2) -> (4) -> (5)
	 				
	 				형식3]
	 					==> 두가지 이상의 조건식을 주고 각 조건이 맞는 경우 처리내용을 정의 해놓는 조건문
	 					
	 					(1)
	 					if(조건식1 - (2)){
	 						실행문1 - (3)
	 					} else if(조건식2 - (4)){
	 						실행문 2- (5)
	 						
	 						.....
	 						
	 					} else if(조건식n -(n)){
	 						 실행문n - (6)
	 					} else {
	 						실행문m -(8)
	 					}
	 					-(9)
	 					
	 					조건식1이 참일경우 : (1) -> (2) -> (3) -> (9)
	 					조건식2이 참일경우 : (1) -> (2) -> (4) -> (5) -> (9)
	 					조건식n이 참일경우 : (1) -> (2) ... -> (n) -> (6) -> (9)
	 					모든 조건식이 거짓일 경우 : (1) -> (2) -> ... -> (n) -> (8) -> (9)
	 			
	 				참고]
	 					제어명령은 중첩해서 사용가능하다.
	 					
	 			2. 반복제어명령
	 			
	 			
	 			
	 */
	//예제] 숫자 두개를 입력받아서 큰수에서 작은수를 뺀 차를 출력하세요.
	
	public Test01() {
		solv();
		
	}
	public void solv() {
		
		Scanner sc = new Scanner(System.in);
		System.out.println("숫자 두개를 입력하세요.");
		
		System.out.print("첫번째 숫자 : ");
		int no1 = sc.nextInt();

		System.out.println();
		
		System.out.print("두번째 숫자 : ");
		int no2 = sc.nextInt();
		
		int cha = 0; //<== 변수선언 & 변수초기화
		int max = 0;
		int min = 0;
	
		
		if(no1> no2) {
		
			cha = no1 - no2;
		} else {
			
			cha = no2 - no1;
		}
		
		if(no2 > no1) {
			int tmp = no1;
			no1 = no2;
			no2 = tmp;
			
		}
		System.out.println("입력한 두수" + no1 + " & " +no2 + " 의 차는" + cha + " 입니다.");
	}

	public static void main(String[] args) {
		new Test01();
		
	}

}
