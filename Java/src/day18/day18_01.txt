# day18_01

스트림(Stream)
	==> 자바는 외부장치와 데이터를 주고 받는 방법을 
		한가지로 통일 시켜 놓았다.
		그것이 바로 Stream 이다.
		
		쉽게 설명을 하자면
		빨대와 같은 개념으로 이해를 하면 된다.
		
		즉, 스트림은 데이터를 주고 받을 외부장치에 꽂기만 하고
		나는 빨기만 하면(같은 함수를 이용하면)
		외부장치의 데이터가 들어온다.
		라는 개념이다.
		
	참고 ]
		스트림은 단방향이다.
		즉, 하나의 스트림은 한방향으로만 데이터를 보낼 수 있다.
		만약 같은 외부장치에 데이터를 주기도 하고 받기도 하고자 한다면
		스트림이 두개 필요하다.
		
		
	스트림의 종류(방향성)
		1. 프로그램으로 데이터가 들어오는 방향
			InputStream, Reader
		2. 프로그램에서 데이터가 나가는 방향
			OutputStream, Writer
			
	스트림의 종류(데이터의 양)
		1. byte단위
			InputStream, OutputStream
			==> 속도가 느리다.(기계어도 처리가 가능하다.)
			
		2. char단위(2byte 단위)
			Reader, Writer
			==> 속도가 조금 빠르다.
				(오직 문자처리만 가능...)
				
				
		참고 ]
			byte가 char로 합쳐지는 순간 운영체제 따라서 비트순서가 바뀔 수 있다.
			
			
	스트림의 종류(상대방 종류)
		1. 타겟스트림(기본스트림)
			==> 외부장치에 직접 연결되는 스트림
			
		2. 필터스트림(보조스트림)
			==> 스트림의 성능향상, 개발의 편의 등을 위해서
				스트림에 연결되는 스트림
				
	참고 ]
		반드시 기본 스트림은 존재해야 하고
		필요에 따라서 필터 스트림을 연결해서 사용해야 한다.
		
---------------------------------------------------------------------------------------------------------

1. InputStream
	
	기본 함수 ]
		
		int read()
		==> 오직 한 문자(1byte)만 읽어들이는 함수
			반환값은 읽은 문자의 갯수를 의미한다.
			
		int read(byte[] b)
		==> 여러바이트를 읽어들이는 함수
			읽은 결과는 매개변수로 입력되는 바이트배열에 기억이 된다.
			반환값은 읽은 데이터 갯수(바이트 수)
			
		int read(byte[] b, int off, int len)
		==> 여러바이트를 읽어들이는 함수
			다만, 배열의 지정한 위치부터 지정한 갯수만큼만 읽어준다.
			반환값은 읽은데이터갯수(바이트 수)
			
2. FileInputStream
	==> 파일에 연결되는 입력용 스트림
	
	생성방법 ]
		
		FileInputStream(String name)
		==> 스트림을 연결할 파일의 이름을 이용해서 스트림을 연결한다.
			
3. FileOutputStream
	==> 파일로 연결된 보내는 방향의 스트림
	
	기본 함수 ]
		
		void write(int b)
		==> 한 글자만 내보내는 함수
		void write(byte[] b)
		==> 여러글자를 내보내는 함수
		void write(byte[] b, int off, int len)
		==> 여러글자 중에서 지정한 부분만 내보내는 함수
			int off		: 내보낼 시작 위치
			int len		: 내보낼 데이터 갯수
		
		
--------------------------------------------------------------------------------------------------

File
	==> 이것은 스트림은 아니다.(데이터를 입력, 출력하는 기능이 없다.)
		다만 우리가 외부장치 중에서 가장 많이 사용하는 외부장치가 파일이다 보니
		그 파일에 대한 정보를 처리하기 위한 클래스
		
		
	생성방법 ]
		
		File(String pathname)
			==> 파일의 경로와 이름을 지정해서 만든다.
			
		File(String parent, String child)
			==> 파일의 경로와 이름을 다로 지정해서 만든다.
			
		File(File parent, String child)
			==> 파일의 정보를 이용하고 파일의 이름만 다시 지정해서 만든다.
	
	참 고 ]
		자바에서의 파일은 폴더 자체도 파일로 인정한다.
		
		예 ] 
			File f = new File("d:\\");
			
	참고 함수]
		
		1. 정보를 알아내는 함수
			getName()		-- 파일의 이름만 알아내는 함수
			getParent()		-- 폴더 이름만 알아내는 함수
			exists()		-- 파일의 존재여부를 알아내는 함수
			length()		-- 파일의 크기를 알아내는 함수
			...
			
		2. 외부적인 작업을 하기 위한 함수
			==> 데이터 입출력 이외에 파일 전체에 대해서 필요한 작업을 할 수 있는 함수들...
			
			delete()		-- 파일 삭제
			mkdir()			-- 폴더 만드는 함수(하나만 만들어 준다.)
			mkdirs()		-- 폴더 만드는 함수(계층에 포함된 폴더 모두를 만들어준다.
			renameTo()		-- 파일이름 변경
			list()			-- 폴더에 있는 파일의 목록을 구하는 함
			...
			
	참고 ]
		
		String[] list()		-- 이름만 알아낸다.
		File[] listFiles()	-- 정보를 알아낸다.
		==> 일반적인 파일의 목록을 알아낸다.
		
		
		String[] list(FilenameFilter filter)
		File[] listFiles(FileFilter filter)
		File[] listFiles(FilenameFilter filter)
		==> 필터링을 해서 리스트를 구할 수 있다.
			즉, 내가 필요한 파일만 골라서 목록을 만들 수 있다.
			
			
------------------------------------------------------------------------------------------------------

보조스트림(필터스트림)
==>
	1. 기본 스트림에 기능을 추가한다던지
	2. 사용자의 편의를 제공하기 위한
	보조적인 기능을 하는 스트림이다.
	
	주의 ]
		반드시 기본 스트림은 존재해야 하고
		필터 스트림은 필요에 따라서 연결해서 사용하면 된다.
	
	참고 ]
		필터 스트림 역시 방향성을 가지고 있다.
		반드시 같은 방향끼리만 연결해야 한다.
		
		
*****
1. BufferedInputStream/BufferedOutputStream
	==> 사용자 편의 기능은 없고
		대신
		스트림의 성능을 향상시키는 역할을 한다.
		버퍼에 데이터를 모았다가 한번에 처리하는 기능이 추가된 스트림이다.
		
		
	*****
	주요함수
		
		flush()
		==> 강제로 버퍼를 비우는 함수
		
		
2. DataInputStream/DataOutputStream
	==> 많이 사용하는 스트림은 아니다.
		기능향상은 없다.
		대신
		보통 스트림은 반드시 byte[] 로만 데이터를 처리한다.
		문자 데이터가 아닌 다른 형태의 데이터는
		문제가 발생할 수 있다.
		==> 자바의 데이터형을 byte[] 로 변환하지 않고 
			직접 외부장치로 입출력하는 기능을 추가한 것

		잘 사용하지 않는 이유
			DataOutput을 이용하는 경우는 반드시 DataInput으로 받아야만 한다.
			순서가 지켜져야 한다.
			(저장 할 때 int, float =---> 받을 때도 int, float 의 순서대로 받아야 한다.)
			
			
3. PrintStream
	==> 필터 계열의 스트림
		사용자의 편의성 + 기능향상